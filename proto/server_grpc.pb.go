// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/server.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TetrisService_PlayTetris_FullMethodName = "/TetrisService/PlayTetris"
)

// TetrisServiceClient is the client API for TetrisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TetrisServiceClient interface {
	PlayTetris(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameMessage, GameMessage], error)
}

type tetrisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTetrisServiceClient(cc grpc.ClientConnInterface) TetrisServiceClient {
	return &tetrisServiceClient{cc}
}

func (c *tetrisServiceClient) PlayTetris(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[GameMessage, GameMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TetrisService_ServiceDesc.Streams[0], TetrisService_PlayTetris_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GameMessage, GameMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TetrisService_PlayTetrisClient = grpc.BidiStreamingClient[GameMessage, GameMessage]

// TetrisServiceServer is the server API for TetrisService service.
// All implementations must embed UnimplementedTetrisServiceServer
// for forward compatibility.
type TetrisServiceServer interface {
	PlayTetris(grpc.BidiStreamingServer[GameMessage, GameMessage]) error
	mustEmbedUnimplementedTetrisServiceServer()
}

// UnimplementedTetrisServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTetrisServiceServer struct{}

func (UnimplementedTetrisServiceServer) PlayTetris(grpc.BidiStreamingServer[GameMessage, GameMessage]) error {
	return status.Errorf(codes.Unimplemented, "method PlayTetris not implemented")
}
func (UnimplementedTetrisServiceServer) mustEmbedUnimplementedTetrisServiceServer() {}
func (UnimplementedTetrisServiceServer) testEmbeddedByValue()                       {}

// UnsafeTetrisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TetrisServiceServer will
// result in compilation errors.
type UnsafeTetrisServiceServer interface {
	mustEmbedUnimplementedTetrisServiceServer()
}

func RegisterTetrisServiceServer(s grpc.ServiceRegistrar, srv TetrisServiceServer) {
	// If the following call pancis, it indicates UnimplementedTetrisServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TetrisService_ServiceDesc, srv)
}

func _TetrisService_PlayTetris_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TetrisServiceServer).PlayTetris(&grpc.GenericServerStream[GameMessage, GameMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TetrisService_PlayTetrisServer = grpc.BidiStreamingServer[GameMessage, GameMessage]

// TetrisService_ServiceDesc is the grpc.ServiceDesc for TetrisService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TetrisService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TetrisService",
	HandlerType: (*TetrisServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayTetris",
			Handler:       _TetrisService_PlayTetris_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/server.proto",
}
